@using Microsoft.AspNetCore.Components.Web
@using Soenneker.Blazor.Extensions.EventCallback
@using Soenneker.Quark.Enums.Colors
@using Soenneker.Quark.Enums.Size
@inherits Soenneker.Quark.Components.Element

<input type="checkbox" @attributes="BuildAttributes()" @onchange="HandleChange" />

@code {

	[Parameter]
	public bool Checked { get; set; }

	[Parameter]
	public bool Indeterminate { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public Color Color { get; set; } = Color.Primary;

	[Parameter]
	public Size Size { get; set; } = Size.Default;

	[Parameter]
	public EventCallback<bool> CheckedChanged { get; set; }

	[Parameter]
	public EventCallback<ChangeEventArgs> OnChange { get; set; }

	private string GetColorClass()
	{
		return $"form-check-input-{Color.Value}";
	}

	private string? GetSizeClass()
	{
		if (Size != Size.Default)
			return $"form-check-input-{Size.Value}";

		return null;
	}

	protected override Dictionary<string, object> BuildAttributes()
	{
		Dictionary<string, object> attributes = base.BuildAttributes();

		var baseClasses = "form-check-input";
		string? colorClass = GetColorClass();
		string? sizeClass = GetSizeClass();

		baseClasses = $"{baseClasses} {colorClass}";

		if (sizeClass != null)
			baseClasses = $"{baseClasses} {sizeClass}";

		attributes["class"] = AppendToClass(attributes.GetValueOrDefault("class")
			?.ToString(), baseClasses);

		if (Checked)
			attributes["checked"] = true;

		if (Indeterminate)
			attributes["indeterminate"] = true;

		if (Disabled)
			attributes["disabled"] = true;

		return attributes;
	}

	private async Task HandleChange(ChangeEventArgs args)
	{
		if (args.Value is bool value)
		{
			Checked = value;
			await CheckedChanged.InvokeIfHasDelegate(Checked);
		}

		await OnChange.InvokeIfHasDelegate(args);
	}

}