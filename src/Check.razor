@using Microsoft.AspNetCore.Components.Web
@using Soenneker.Blazor.Extensions.EventCallback
@using Soenneker.Quark.Enums.Size
@using Soenneker.Quark.Validations
@using Soenneker.Quark.Validations.Enums
@using System.Linq.Expressions
@using Soenneker.Quark.Dtos.Colors

@inherits Soenneker.Quark.Element
@implements Soenneker.Quark.Validations.Abstract.IValidationInput

<input type="checkbox" @attributes="BuildAttributes()" @onchange="HandleChange" />

@code {

    [Parameter]
    public bool Checked { get; set; }

    [Parameter]
    public bool Indeterminate { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public Color Color { get; set; } = Color.Primary;

    [Parameter]
    public Size Size { get; set; } = Size.Default;

    [Parameter]
    public EventCallback<bool> CheckedChanged { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [CascadingParameter]
    public Validation? ParentValidation { get; set; }

    [Parameter]
    public Expression<Func<bool>>? CheckedExpression { get; set; }

    public object? ValidationValue => Checked;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ParentValidation is not null)
        {
            if (CheckedExpression is not null)
                await ParentValidation.InitializeInputExpression(CheckedExpression);

            await ParentValidation.InitializeInput(this);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private string? GetColorClass()
    {
        if (Color.IsTheme)
            return $"form-check-input-{Color.Theme!.Value}";

        return null;
    }

    private string? GetSizeClass()
    {
        if (Size != Size.Default)
            return $"form-check-input-{Size.Value}";

        return null;
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        Dictionary<string, object> attributes = base.BuildAttributes();

        var baseClasses = "form-check-input";
        string? colorClass = GetColorClass();
        string? sizeClass = GetSizeClass();
        string? validationClass = GetValidationClass();

        baseClasses = $"{baseClasses} {colorClass}";

        if (sizeClass != null)
            baseClasses = $"{baseClasses} {sizeClass}";

        if (validationClass != null)
            baseClasses = $"{baseClasses} {validationClass}";

        AppendToClassAttr(attributes, baseClasses);

        if (Checked)
            attributes["checked"] = true;

        if (Indeterminate)
            attributes["indeterminate"] = true;

        if (Disabled)
            attributes["disabled"] = true;

        return attributes;
    }

    private string? GetValidationClass()
    {
        if (ParentValidation?.Status == ValidationStatus.Error)
            return "is-invalid";

        if (ParentValidation?.Status == ValidationStatus.Success)
            return "is-valid";

        return null;
    }

    private async Task HandleChange(ChangeEventArgs args)
    {
        if (args.Value is bool value)
        {
            Checked = value;
            await CheckedChanged.InvokeIfHasDelegate(Checked);
        }

        await OnChange.InvokeIfHasDelegate(args);

        if (ParentValidation is not null)
            await ParentValidation.NotifyInputChanged(Checked);
    }

}
